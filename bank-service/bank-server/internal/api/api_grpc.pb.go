// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClerkBankServiceClient is the client API for ClerkBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClerkBankServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	DoTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
}

type clerkBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClerkBankServiceClient(cc grpc.ClientConnInterface) ClerkBankServiceClient {
	return &clerkBankServiceClient{cc}
}

func (c *clerkBankServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/bank.ClerkBankService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clerkBankServiceClient) DoTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/bank.ClerkBankService/DoTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClerkBankServiceServer is the server API for ClerkBankService service.
// All implementations must embed UnimplementedClerkBankServiceServer
// for forward compatibility
type ClerkBankServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	DoTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	mustEmbedUnimplementedClerkBankServiceServer()
}

// UnimplementedClerkBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClerkBankServiceServer struct {
}

func (UnimplementedClerkBankServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedClerkBankServiceServer) DoTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoTransaction not implemented")
}
func (UnimplementedClerkBankServiceServer) mustEmbedUnimplementedClerkBankServiceServer() {}

// UnsafeClerkBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClerkBankServiceServer will
// result in compilation errors.
type UnsafeClerkBankServiceServer interface {
	mustEmbedUnimplementedClerkBankServiceServer()
}

func RegisterClerkBankServiceServer(s grpc.ServiceRegistrar, srv ClerkBankServiceServer) {
	s.RegisterService(&ClerkBankService_ServiceDesc, srv)
}

func _ClerkBankService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkBankServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.ClerkBankService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkBankServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClerkBankService_DoTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClerkBankServiceServer).DoTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.ClerkBankService/DoTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClerkBankServiceServer).DoTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClerkBankService_ServiceDesc is the grpc.ServiceDesc for ClerkBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClerkBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.ClerkBankService",
	HandlerType: (*ClerkBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _ClerkBankService_CreateAccount_Handler,
		},
		{
			MethodName: "DoTransaction",
			Handler:    _ClerkBankService_DoTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ClientBankServiceClient is the client API for ClientBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientBankServiceClient interface {
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	Statement(ctx context.Context, in *BankStatementRequest, opts ...grpc.CallOption) (*BankStatementResponse, error)
}

type clientBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientBankServiceClient(cc grpc.ClientConnInterface) ClientBankServiceClient {
	return &clientBankServiceClient{cc}
}

func (c *clientBankServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/bank.ClientBankService/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientBankServiceClient) Statement(ctx context.Context, in *BankStatementRequest, opts ...grpc.CallOption) (*BankStatementResponse, error) {
	out := new(BankStatementResponse)
	err := c.cc.Invoke(ctx, "/bank.ClientBankService/Statement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientBankServiceServer is the server API for ClientBankService service.
// All implementations must embed UnimplementedClientBankServiceServer
// for forward compatibility
type ClientBankServiceServer interface {
	Transfer(context.Context, *TransferRequest) (*TransactionResponse, error)
	Statement(context.Context, *BankStatementRequest) (*BankStatementResponse, error)
	mustEmbedUnimplementedClientBankServiceServer()
}

// UnimplementedClientBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientBankServiceServer struct {
}

func (UnimplementedClientBankServiceServer) Transfer(context.Context, *TransferRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedClientBankServiceServer) Statement(context.Context, *BankStatementRequest) (*BankStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statement not implemented")
}
func (UnimplementedClientBankServiceServer) mustEmbedUnimplementedClientBankServiceServer() {}

// UnsafeClientBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientBankServiceServer will
// result in compilation errors.
type UnsafeClientBankServiceServer interface {
	mustEmbedUnimplementedClientBankServiceServer()
}

func RegisterClientBankServiceServer(s grpc.ServiceRegistrar, srv ClientBankServiceServer) {
	s.RegisterService(&ClientBankService_ServiceDesc, srv)
}

func _ClientBankService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientBankServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.ClientBankService/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientBankServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientBankService_Statement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientBankServiceServer).Statement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bank.ClientBankService/Statement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientBankServiceServer).Statement(ctx, req.(*BankStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientBankService_ServiceDesc is the grpc.ServiceDesc for ClientBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.ClientBankService",
	HandlerType: (*ClientBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _ClientBankService_Transfer_Handler,
		},
		{
			MethodName: "Statement",
			Handler:    _ClientBankService_Statement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
